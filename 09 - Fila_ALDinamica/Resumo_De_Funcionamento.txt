Este código implementa uma aplicação que gerencia uma fila de pedidos. Ela permite o cadastro de pedidos, 
impressão da fila na tela e em um arquivo, leitura da fila a partir de um arquivo e a consulta da quantidade de pedidos na frente de um cliente específico. 

Estruturas:
Pedido:

Descrição: É uma estrutura que representa um pedido, contendo informações como o nome do cliente, telefone para contato, 
endereço de entrega, produto pedido e valor do produto.
Campos:
char nomeCliente[50]: Armazena o nome do cliente.
char telefoneContato[15]: Armazena o telefone para contato.
char enderecoEntrega[100]: Armazena o endereço de entrega.
char produtoPedido[50]: Armazena o produto pedido.
float valorProduto: Armazena o valor do produto.
struct Pedido *proximo: Um ponteiro para o próximo pedido na fila.
struct Pedido *anterior: Um ponteiro para o pedido anterior na fila.
Fila:

Descrição: É uma estrutura que representa a fila de pedidos, contendo ponteiros para o primeiro e o último pedido na fila.
Campos:
Pedido *frente: Um ponteiro para o primeiro pedido na fila.
Pedido *tras: Um ponteiro para o último pedido na fila.
Funções:
inicializarFila:

Descrição: Inicializa uma fila vazia.
enfileirarPedido:

Descrição: Enfileira um pedido na fila.
desenfileirarPedido:

Descrição: Desenfileira um pedido da fila.
imprimirFila:

Descrição: Imprime o conteúdo da fila na tela.
imprimirFilaEmArquivo:

Descrição: Imprime o conteúdo da fila em um arquivo de texto.
lerFilaDeArquivo:

Descrição: Lê o conteúdo de um arquivo de texto para a fila.
pedidosNaFrente:

Descrição: Retorna a quantidade de pedidos na frente de um cliente especificado na fila.
Função principal (main):
A função principal main é responsável por interagir com o usuário e executar diferentes operações, como cadastrar um pedido, 
imprimir a fila na tela, imprimir a fila em um arquivo, ler a fila de um arquivo, consultar pedidos na frente de um cliente e sair do programa.

As diferentes operações são realizadas chamando as funções definidas no arquivo "fila.h" e implementadas no arquivo "fila.c".

Este código mostra a implementação de uma fila duplamente encadeada para gerenciar pedidos, 
incluindo operações como enfileirar e desenfileirar pedidos, além de operações de leitura e escrita em arquivos.

Vantagens:

Inserção e remoção eficientes: Uma fila duplamente encadeada é eficiente para operações que envolvem a inserção ou remoção de elementos em ambos os extremos da fila. 
Isso a torna adequada para cenários onde você precisa acessar rapidamente os elementos de ambos os lados da fila.

Flexibilidade: A fila duplamente encadeada é mais flexível do que uma fila simples, pois permite operações em ambos os lados. 
Isso é útil em situações em que você deseja inserir ou remover elementos tanto no início quanto no final da fila.

Facilidade de implementação: Apesar de ser mais complexa do que uma fila simples, 
a implementação de uma fila duplamente encadeada é mais simples do que a de algumas estruturas de dados mais complexas, como listas ligadas circulares.

Desvantagens:

Uso de memória: Assim como uma pilha duplamente encadeada, 
uma fila duplamente encadeada geralmente usa mais memória do que uma fila simples devido à necessidade de armazenar dois ponteiros para cada elemento. 
Isso pode ser uma desvantagem em sistemas com restrições de memória.

Complexidade de código: A gestão de uma fila duplamente encadeada é mais complexa do que a de uma fila simples, 
envolvendo o gerenciamento de dois ponteiros (um para o início e outro para o final). 
Isso pode aumentar a chance de erros de programação e tornar a depuração mais desafiadora.

Complexidade operacional: A inserção e a remoção em ambos os extremos da fila podem ser complexas de se implementar corretamente, 
e é necessário garantir que as operações sejam feitas de forma consistente para evitar problemas lógicos.

Em resumo, a escolha de usar uma fila duplamente encadeada depende das necessidades específicas do seu aplicativo. 
Se você precisa de operações eficientes nos extremos da fila e está disposto a lidar com a complexidade adicional de código e o uso de memória, 
uma fila duplamente encadeada pode ser uma escolha adequada. No entanto, se suas necessidades são mais simples, uma fila simples pode ser mais apropriada.